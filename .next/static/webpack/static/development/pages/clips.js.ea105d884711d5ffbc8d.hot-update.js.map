{"version":3,"file":"static/webpack/static/development/pages/clips.js.ea105d884711d5ffbc8d.hot-update.js","sources":["webpack:///./pages/clips.js"],"sourcesContent":["import { Component } from 'react'\nimport Layout from '../components/Layout'\nimport VideoPlayer from '../containers/VideoPlayer'\nimport InputField from '../components/InputField'\nimport ActionButton from '../components/ActionButton'\nimport ClipCard from '../components/ClipCard'\nimport InputRange from 'react-input-range'\nimport { secondsToFormatedTime } from '../lib'\nimport { connect } from 'react-redux'\nimport {\n  addVideoUrl,\n  addClipToClipList,\n  toggleSelectClipCard,\n  updateFullVideoDuration,\n  updateRangeValuesWhenIsDragged,\n  updateDefaultRangeValuesWhenVideoFinishLoad\n} from '../redux/actions'\n\nclass cls extends Component {\n  state = {\n    name: ''\n  }\n\n  _handleOnchangeInputValue = (e) => this.setState({ name: e.target.value })\n\n  _checkIfInputIsFilled = () => {\n    if (!this.state.name) return true\n    return false\n  }\n\n  _handleRangeChange = (value) => this.props.updateRangeValuesWhenIsDragged(value)\n\n  _onClickClipCard = (id, startAt, endAt) => {\n    const { url } = this.props.state.vidslice.video\n    const urlWithMediaFragments = `${url}#t=${startAt},${endAt}`\n\n    this.props.toggleSelectClipCard(id)\n    this.props.addVideoUrl(urlWithMediaFragments)\n\n    const video = document.getElementById('video-player')\n    video.load()\n    video.play()\n  }\n\n  _createClip = () => {\n    const { name } = this.state\n    const { min, max } = this.props.state.vidslice.video.value\n\n    const startAt = secondsToFormatedTime(min)\n    const endAt = secondsToFormatedTime(max)\n\n    this.props.addClipToClipList({\n      name,\n      endAt,\n      startAt\n    })\n  }\n\n  render () {\n    const { name } = this.state\n    const { clips, video: { url, defaultMin, defaultMax, value }} = this.props.state.vidslice\n    return (\n      <Layout title=\"Clips\">\n        <div className=\"container\">\n          <div className=\"section top-section\">\n            <div className=\"video-player-view\">\n              <VideoPlayer\n                url={url}\n                muted\n                height=\"350px\"\n                width=\"100%\"\n                { ...this.props }\n              />\n            </div>\n            <div className=\"form-view\">\n              <div className=\"name-input-view centered\">\n                <InputField\n                  placeholder=\"Write a name for your clip\"\n                  value={name}\n                  onChange={this._handleOnchangeInputValue}\n                />\n              </div>\n              <div className=\"slider-view\">\n                <InputRange\n                  maxValue={defaultMax}\n                  minValue={defaultMin}\n                  value={value}\n                  onChange={this._handleRangeChange}\n                  ariaLabelledby=\"hello\"\n                />\n              </div>\n              <div className=\"button-view centered\">\n                <ActionButton\n                  text=\"Create clip\"\n                  backgroundColor=\"#1abc9c\"\n                  textColor=\"white\"\n                  onClick={this._createClip}\n                  disabled={this._checkIfInputIsFilled()}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"section\">\n            <div className=\"clips-list-view\">\n              {clips.map(clip => (\n                <ClipCard\n                  key={clip.id}\n                  {...clip}\n                  onClick={this._onClickClipCard}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n        <style jsx>\n          {`\n            .container {\n              display: grid;\n              grid-gap: 20px;\n              grid-template-rows: 350px 300px;\n            }\n\n            .section {\n\n            }\n\n            .top-section {\n              display: grid;\n              grid-gap: 20px;\n              grid-template-columns: 800px auto;\n            }\n\n            .video-player-view {\n              background: black;\n              margin-left: 10px;\n            }\n\n            .top-section .form-view {\n              display: grid;\n              grid-template-rows: repeat(3, auto);\n            }\n\n            .name-input-view {\n\n            }\n\n            .slider-view {\n              display: grid;\n              align-items: center;\n              padding: 20px;\n            }\n\n            .button-view {\n\n            }\n\n            .clips-list-view {\n              padding-top: 20px;\n              padding-left: 10px;\n              padding-right: 10px;\n              display: grid;\n              grid-template-columns: repeat(7, 1fr);\n              grid-gap: 20px;\n            }\n\n            .centered {\n              display: grid;\n              align-items: center;\n              justify-content: center;\n            }\n          `}\n        </style>\n      </Layout>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  state\n})\n\nconst mapDispatchToProps = {\n  addVideoUrl,\n  addClipToClipList,\n  toggleSelectClipCard,\n  updateFullVideoDuration,\n  updateRangeValuesWhenIsDragged,\n  updateDefaultRangeValuesWhenVideoFinishLoad\n}\n\nconst Clips = connect(mapStateToProps, mapDispatchToProps)(cls)\nexport default Clips\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;;;;;;;;;;;;;;;;;;AACA;AACA;AADA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;;;;;;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AADA;AAGA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AA1CA;AAAA;AAAA;AAAA;AAgHA;;;;AA5JA;AACA;AA8JA;AAAA;AACA;AADA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}